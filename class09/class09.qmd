---
title: "Class 9: Halloween Candy Project"
author: "Ashley Allen (PID: A14633373)"
format: pdf
toc: true
---

Today we will examine data from 538 on common Halloween candy. In particular we will use ggplot, dplyr, and PCA to make sense of this multivariate data set.

## Importing candy data

```{r}
candy <- read.csv("candy-data.csv", row.names=1)
head(candy)
```

> Q1. How many different candy types are in this dataset?

```{r}
nrow(candy)
```

> Q2. How many fruity candy types are in the dataset?

```{r}
sum(candy$fruity)
```

> How many chocolate candy are there?

```{r}
sum(candy$chocolate)
```


## What is your favorate candy?

```{r}
candy["Twix", "winpercent"]
candy["Twix",]$winpercent
```

> Q3. What is your favorite candy in the dataset and what is it’s winpercent value?

```{r}
candy["Almond Joy",]$winpercent
```

> Q4. What is the winpercent value for “Kit Kat”?

```{r}
candy["Kit Kat", ]$winpercent
```

> Q5. What is the winpercent value for “Tootsie Roll Snack Bars”?

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```

```{r}
library("skimr")
skim(candy)
```

> Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

The `winpercent` column has larger values than all others. While others are on a 0-1 scale the `winpercent` is much higher (0-100% scale). I will need to scale this data set before analysis like PCA or it will dominate.

> Q7. What do you think a zero and one represent for the candy$chocolate column?

A zero in the `candy$chocolate` column indicates that the candy isnt chocolate while a 1 indicates that it is.

> Q8. Plot a histogram of winpercent values

```{r}
library(ggplot2)
hist(candy$winpercent)
```
```{r}
ggplot(candy) + 
  aes(winpercent) + 
  geom_histogram(bins=10, fill="pink")
```

> Q9. Is the distribution of winpercent values symmetrical?

No

> Q10. Is the center of the distribution above or below 50%?

It doesn't appear to be from looking at the histogram, but a summary gives us a better answer.

```{r}
summary(candy$winpercent)
```

> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

-step 1: find all "chocolate" candy
```{r}
choc.inds <- candy$chocolate == 1
```

-step 2: find their "winpercent" values
```{r}
choc.win <- candy[choc.inds, ]$winpercent
```

-step 3: summarize these values
```{r}
choc.mean <- mean(choc.win)
```

-step 4: find all "fruity" candy
```{r}
fruity.inds <- candy$fruity == 1
```

-step 5: find their "winpercent" values
```{r}
fruity.win <- candy[fruity.inds, ]$winpercent
```

-step 6: summarize these values
```{r}
fruit.mean <- mean(fruity.win)
```

-step 7: compare the two summary values

Clearly we see that chocolate has a higher mean `winpercent`
```{r}
choc.mean
fruit.mean
```

> Q12. Is this difference statistically significant?

Yes, we see a low p-value of 2.871e-08.
```{r}
t.test(choc.win, fruity.win)
```


## Overall Candy Rankings

```{r}
library("dplyr")
```
> Q13. What are the five least liked candy types in this set?

```{r}
# Not that useful - it just sorts the values
sort(candy$winpercent)
```
```{r}
x <- c(10, 1, 100)
sort(x)
order(x)
x[order(x)]
```

The `order()` function tell us how to arrange the elements of the input to make them sorted - i.e. how to order them 

We can determine the order of winpercent to make them sorted and use that order to arrange the whole dataset.

```{r}
ord.inds <- order(candy$winpercent)
head(candy[ord.inds,])
```


I prefer using **dplyr** over base R. I think it leaves less room for error.
```{r}
candy %>% 
  arrange(winpercent) %>% 
  head(5)
```

> Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
ord.inds <- order(candy$winpercent, decreasing = T)
head(candy[ord.inds,])
```

```{r}
candy %>% 
  arrange(winpercent) %>% 
  tail(5)
```

> Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
ggplot(candy) + 
  aes(winpercent, rownames(candy)) +
  geom_col()
```

> Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) + 
  geom_col()
```

## Time to add some useful color

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent), fill = chocolate) + 
  geom_col()
```

We need to make our own separate color vector where we can spell out what candy is colored a particular color.

```{r}
mycols <- rep("grey", nrow(candy))
mycols[candy$chocolate == 1] <- "chocolate"
mycols[candy$bar == 1] <- "brown"
mycols[candy$fruity == 1] <- "green"
mycols
```

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) + 
  geom_col(fill = mycols)
```

> Q17. What is the worst ranked chocolate candy?

Nik L Nip

> Q18. What is the best ranked fruity candy?

Starburst

## Taking a look at pricepercent

Make a plot of winpercent (x-axis) vs pricepercent (y-axis)

```{r}
ggplot(candy) + 
  aes(winpercent, pricepercent, label=rownames(candy)) + 
  geom_point(col=mycols) + 
  geom_text()
```

TO avoid over plotting of the labels we can use the add on package **ggrepel**

```{r}
library("ggrepel")
ggplot(candy) + 
  aes(winpercent, pricepercent, label=rownames(candy)) + 
  geom_point(col=mycols) + 
  geom_text_repel(max.overlaps = 6) + 
  theme_bw()
```

> Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Reese's Miniatures

> Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

These 5 are the most expensive, and Nik L Nip is the least popular.

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```


> Q21. Make a barplot again with geom_col() this time using pricepercent and then improve this step by step, first ordering the x-axis by value and finally making a so called “dot chat” or “lollipop” chart by swapping geom_col() for geom_point() + geom_segment(). (unanswered)

```{r}
ggplot(candy) +
  aes(pricepercent, reorder(rownames(candy), pricepercent)) +
  geom_col(aes(yend = reorder(rownames(candy), pricepercent), 
                   xend = 0), col="gray40")
```

```{r}
ggplot(candy) +
  aes(pricepercent, reorder(rownames(candy), pricepercent)) +
  geom_segment(aes(yend = reorder(rownames(candy), pricepercent), 
                   xend = 0), col="gray40") +
    geom_point()
```

## Exploring the correlation structure

Now that we have explored the data set a little, we will see how the variables interact with one another.

First we will use correlation and view the results with the **corrplot** package to plot a correlation matrix.

```{r}
library("corrplot")
```

```{r}
cij <- cor(candy)
cij
corrplot(cij)
```

> Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

Fruit and chocolate are anti-correlated.

> Q23. Similarly, what two variables are most positively correlated?

Chocolate and winpercent are positively correlated.


## Principal Component Analysis

Let's apply PCA using the `prcomp()` function to our candy data set remembering to set the **scale=TRUE** argument.

```{r}
pca <- prcomp(candy, scale = TRUE)
summary(pca)
```

```{r}
attributes(pca)
```


Let's plot our main results as our PCA "score plot"

```{r}
ggplot(pca$x) + 
  aes(PC1, PC2, label = rownames(pca$x)) + 
  geom_point(col=mycols) + 
  geom_text_repel(max.overlaps = 9, col=mycols)
```

```{r}
my_data <- cbind(candy, pca$x[,1:3])
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=mycols)

p
```

```{r}
p + geom_text_repel(size=3.3, col=mycols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```

```{r}
##library("plotly")
##ggplotly(p)
```


Let's look at how the original variables contribute to the PCs, start with PC1

```{r}
pca$rotation
```

```{r}
ggplot(pca$rotation) + 
  aes(PC1, reorder(rownames(pca$rotation), PC1)) + 
  geom_col()
```

> Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

Fruity, hard, and pluribus.These values make sense as they're all clustered together on the right side of the graph.
