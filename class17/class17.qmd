---
title: "Class 17: Analyzing sequencing data in the cloud"
author: "Ashley Allen (PID: A14633373)"
format: pdf
toc: true
---

## Downstream analysis

```{r}
library(tximport)
library(rhdf5)

# setup the folder and filenames to read
folders <- dir(pattern="SRR21568*")
samples <- sub("_quant", "", folders)
files <- file.path( folders, "abundance.h5" )
names(files) <- samples

txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
```

```{r}
head(txi.kallisto$counts)
```

The number of transcripts we have for each sample:
```{r}
colSums(txi.kallisto$counts)
```

How many transcripts are detected in at least one sample:
```{r}
sum(rowSums(txi.kallisto$counts)>0)
```

Filtering out annoted transcripts with no reads and those with no change over samples:
```{r}
to.keep <- rowSums(txi.kallisto$counts) > 0
kset.nonzero <- txi.kallisto$counts[to.keep,]
```

```{r}
keep2 <- apply(kset.nonzero,1,sd)>0
x <- kset.nonzero[keep2,]
```


## Principal Component Analysis

Computing the principal components, centering and scaling each transcriptâ€™s measured levels so that each feature contributes equally to the PCA:

```{r}
pca <- prcomp(t(x), scale=TRUE)
```

```{r}
summary(pca)
```

Visualizing the summarized transcriptomic profiles of each sample using the first two principal components:

```{r}
plot(pca$x[,1], pca$x[,2],
     col=c("blue","blue","red","red"),
     xlab="PC1", ylab="PC2", pch=16)
```

Using ggplot to make a better visualization:

```{r}
library(ggplot2)
```

```{r}
library(ggrepel)
```

```{r}
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)
```

```{r}
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)
```

```{r}
ggplot(y) + 
  aes(PC1, PC2, col=Condition) + 
  geom_point() + 
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
ggplot(y) + 
  aes(PC1, PC3, col=Condition) + 
  geom_point() + 
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
ggplot(y) + 
  aes(PC2, PC3, col=Condition) + 
  geom_point() + 
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```


## Differential-expression analysis

Creating a DESeqDataSet for use with DESeq2:
```{r message = FALSE}
library(DESeq2)
```

```{r}
sampleTable <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)
```

```{r}
dds <- DESeqDataSetFromTximport(txi.kallisto,
                                sampleTable, 
                                ~condition)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```

