---
title: "Class 13"
author: "Ashley Allen (PID: A14633373)"
format: pdf
---

Today we will analyze a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import countData and colData

There are two data sets I need to import/read: 
- `countData` the transcript counts per gene (rows) in the different experiments
- `colData` information (a.k.a. metadata) about the columns (i.e. experiments) in `countData`

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```


Looking at the data with `head()`
```{r}
head(counts)
```

```{r}
head(metadata)
```


> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```


> Q2. How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)
```

```{r}
sum(metadata$dex == "control")
```


## Toy differential gene expression

We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean value for "treated".

**Step 1:** Extract all "control" columns from the `counts` data

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
```

```{r}
dim(control.counts)
```

**Step 2:** Find the mean value for each gene in these columns

Now find the row wise mean

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)
```

```{r}
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

Rather than dividing by 4 we could divide by ncol() in order to make sure our mean is always correct.

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ , treated.inds]
```

```{r}
treated.mean <- rowSums(treated.counts)/ncol(treated.counts)
```

```{r}
head(treated.mean)
```

Let's put these two mean values together

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

```{r}
head(meancounts)
```


> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts, xlab="Control", ylab="Treated")
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

```{r}
library(ggplot2)

ggplot(meancounts) + 
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.3)
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

Adding `log="xy"` allows us to use a log scale using the `plot()` argument, but in `ggplot()` we can use `scale_x_continuous(trans="log2"` for x (and then chaning it for y as well).

Whenever we see data that is so heavily skewed like this we often log transform it so we can see what is going on more easily.

```{r}
plot(meancounts, xlab="Control", ylab="Treated", log="xy")
```

```{r}
ggplot(meancounts) + 
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.3) + 
  scale_x_continuous(trans="log2") + 
  scale_y_continuous(trans="log2")
```

We most often work in log2 units as this makes the math easier.

```{r}
# treated / control
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
log2(80/20)
```

```{r}
# treated / control
log2(20/40)
```


Add "log2 fold-change" values to our `meancounts` data set 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
head(meancounts)
```


We need to filter out zero count genes - i.e. any remove the rows (genes) that have a 0 value in either control or treated means.


How many genes are "up" regulated at the common log2 fold-change threshold of +2?

```{r}
up.inds <- meancounts$log2fc >= 2
sum(up.inds, na.rm=T)
```

How many genes are "down" regulated at the threshold of -2?

```{r}
down.inds <- meancounts$log2fc <= -2
sum(down.inds, na.rm=T)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The `arr.in` function is used to return TRUE values that will tell us which genes and samples have zero values. Unique would then ensure we don't count rows twice if they have both zero entries.


> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
up.ind <- mycounts$log2fc > 2
sum(up.ind)
```


> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? (unanswered)

```{r}
down.ind <- mycounts$log2fc < (-2)
sum(down.ind)
```

> Q10. Do you trust these results? Why or why not?

I don't trust these results, as it just tallies TRUE and FALSE values.


## Setting up for DESeq2 

To do this the right way we need to consider the significance of the differences not just their magnitude.

```{r}
#/ message:  false
library(DESeq2)
```


To use this package it wants countData and colData in a specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                              colData = metadata, 
                              design = ~dex)
```


## Principal Component Analysis (PCA)

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```
```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```


## DESeq analysis

```{r}
dds <- DESeq(dds)
```

Extract my results:
```{r}
res <- results(dds)
head(res)
```

```{r}
summary(res)
```
```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```


## Data Visualization

Plot of fold-change vs. P-value (adjusted for multiple testing)

```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the P-value. Looking down the y-axis we see more significance.

```{r}
plot(res$log2FoldChange, log(res$padj))
```

```{r}
log(0.01)
```

```{r}
log(0.0000000001)
```

We can flip the y-axis (so we can read UP rather than DOWN the axis) to make it easier to read, by putting a minus sign on it (the result is a volcano plot).

```{r}
plot(res$log2FoldChange, -log(res$padj), 
     xlab="Log2 Fold-change", 
     ylab="-log(P-value")
```

Let's save our work to date

```{r}
write.csv(res, file="myresults.csv")
```


To finish off let's make a nicer volcano plot

**Step 1:** Add the log2 threshold lines of +2/-2
**Step 2:** Add P-value threshold lines at 0.05
**Step 3:** Add color to highlight the subset of genes that meet both the above thresholds

```{r}
mycols <- rep("grey", nrow(res))
mycols[res$log2FoldChange >=2] <- "red"
mycols[res$log2FoldChange <=-2] <- "blue"
mycols[res$padj > 0.05] <- "grey"
```

```{r}
ggplot(res) + 
  aes(res$log2FoldChange, -log(res$padj)) + 
  geom_point(col=mycols) + 
  geom_vline(xintercept=c(-2,2), linetype="dashed", color="grey", size=1) + 
  geom_hline(yintercept=-log(0.05), linetype="dashed", color="grey", size=1)
```

```{r}
#library(EnhancedVolcano)
#library(ggrepel)
```

```{r}
#x <- as.data.frame(res)

#EnhancedVolcano(x,
    #lab = x$symbol,
    #x = 'log2FoldChange',
    #y = 'pvalue')
```


## Add gene annotation data

Now the question is what are the blue points in the above volcano plot - i.e. what are the genes most influenced by drug treatment here?

We will use some BioConductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids

We can install these packages with `BiocManager::install()`
```{r}
library(AnnotationDbi)
```

```{r}
library(org.Hs.eg.db)
```

What database identifiers can I translate between here:

```{r}
columns(org.Hs.eg.db)
```

We can use the `mapIDS()` function to translate/map between these different identifier formats.

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

Let's add SYMBOL, GENENAME, and ENTREZID

```{r}
res$symbol <- mapIds(org.Hs.eg.db, 
                      keys=rownames(res),
                      keytype = "ENSEMBL",
                      column = "SYMBOL")
res$genename <- mapIds(org.Hs.eg.db, 
                      keys=rownames(res),
                      keytype = "ENSEMBL",
                      column = "GENENAME") 
res$entrez <- mapIds(org.Hs.eg.db, 
                      keys=rownames(res),
                      keytype = "ENSEMBL",
                      column = "ENTREZID")
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL")
head(res)
```
```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```
```{r}
write.csv(res[ord,], "deseq_results.csv")
```


## Pathway analysis

Now I know the gene names and their IDS in different databases I want to know what type of biology they are involved in...

This is the job of "pathway analysis" (a.k.a. "gene set enrichment")

There are tons of different BioConductor packages for pathway analysis here we just use on of them called **gage**, **pathview**, and **gageData**. I will install these packages with `BiocManager::install()`

```{r}
library(gage)
```

```{r}
library(pathview)
```

```{r}
library(gageData)
```


```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```

We will use these KEGG gene sets (a.k.a pathways) and our `res` results to see what overlaps. To do this we will use the `gage()` function.

For input `gage()` wants just a vector of importance - in our case FoldChange values.

```{r}
foldchanges <- res$log2FoldChange
```


We can add names to our vector that are useful for book keeping so we know what a given value corresponds to:
```{r}
x <- c(10,100,200)
names(x) <- c("barry", "alice", "chandra")
x
```


Let's put names on our `foldchanges` vector - here we will use `res$entrez`

```{r}
names(foldchanges) <- res$entrez
```


Now I can run "pathway analysis"

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
head(keggres$less)
```
```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```


We can get a pathway image file with our gene sets highlighted via the `pathview()` function.

```{r}
pathview(foldchanges, pathway.id = "hsa05310")
```

Insert this figure in my report

![](hsa05310.pathview.png)

> Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
pathview(foldchanges, pathway.id = "hsa05332")
```

![](hsa05332.pathview.png)

```{r}
pathview(foldchanges, pathway.id = "hsa04940")
```

![](hsa04940.pathview.png)


## Plotting Counts for Genes of Interest

```{r}
i <- grep("CRISPLD2", res$symbol)
res[i,]
```
```{r}
rownames(res[i,])
```
```{r}
plotCounts(dds, gene="ENSG00000103196", intgroup="dex")
```
```{r}
# Return the data
d <- plotCounts(dds, gene="ENSG00000103196", intgroup="dex", returnData=TRUE)
head(d)
```
```{r}
boxplot(count ~ dex , data=d)
```
```{r}
library(ggplot2)
ggplot(d, aes(dex, count, fill=dex)) + 
  geom_boxplot() + 
  scale_y_log10() + 
  ggtitle("CRISPLD2")
```



